Project 2 final draft
##Purpose of Product
The purpose of this product is to give a basic tutorial on how best to use SpaCy for people who are unfamiliar with the coding language or the language processor in general.  This tutorial will be available to users of the Scholar’s Studio in the Charles Library, so the main demographic here will be people intending to use coding in a fairly basic sense in order to create things within the studio. This can be considered both a full tutorial for those that require that sort of thing, as well as a helpful reference tool for those that are more experienced in this field.
Purpose of Documentation
The purpose of documentation is to check with people who are new to programming and decide how well current tutorials function as well as what should be put in a newer tutorial to make it easier to digest for an unexperienced reader. This documentation aims to identify common problems new users might have so that they may be addressed within the tutorial and make learning coding easier and more accessible to people in the studio. In addition, the documentation is meant to speculate on potential challenges or obstacles that may come up in putting together this tutorial.
Usability Goals
The goal is to get people acquainted with some of the functions of spaCy in as easy a manner as possible. SpaCy – and coding in general – is a difficult thing to wrap one’s mind around sometimes, and there are numerous things that can hamper a person’s ability to quickly grasp the key concepts, methods of work, and shortcuts that are available to help make things easier. Through this tutorial, the hope is that all of the common mistakes or confusions a rookie coder might have will be addressed within the tutorial, so as to expedite the process of learning at least the basics of a complicated coding system and natural language processor such as SpaCy.
##Product Description
A tutorial that acquaints the reader with the basics of coding in spaCy and helps them to understand the differences between it and other coding they may or may not be familiar with, such as markdown. This tutorial will be used in the Scholar’s Studio within the Charles Library and will be accessible to students, staff, and professors who attempt to use the studio and create something within it. The purpose here is to explain certain aspects of SpaCy and coding in general so as to have a readily available source of information that is friendly to new users.
Audience Profile
 Based on testing we have conducted in class among the students (including myself), I have compiled a list of common attributes that might describe the average user/reader of our tutorial. Given that this project is being created for the Scholar’s Studio in the library, I believe that the average user will be a Temple University student. Scholar Studio staff and perhaps a few instructors will use it as well, but the user base will be mostly students. In addition, these users will likely have little to no idea how to code and even fewer will know how to use SpaCy. Because of this, there is a lot of work to be done in introducing the user to coding, SpaCy, and the use of natural language processors in general. While there may be a few initial users that know what they are doing, most people probably won’t, therefore, that is the audience that I believe should be catered to more heavily. People who know what they’re doing will not need to rely on a tutorial or they could just cherry pick what they need out of the tutorial. Here are a few common things that have come up in testing amongst the class that I think may typify the average new user.
- no prior knowledge of coding
- language of coding was initially confusing (i.e. token, doc, process, run, etc)
- finding it hard to remember complex information
- spaCy not being easy to pick up for them
- having to remember the order of things/correct variables is difficult
- spaCy/Collab feels overwhelming. If the written lines of code are not exactly correct, they won't work. And you have to know enough about things to find what's wrong and know exactly how to fix it.
- requires more overview of why things happen, how things happen, etc in order to truly understand the concept
- few opportunities to practice
- when reading most tutorials, it feels like I’m just following instructions as opposed to actually learning how to code. 
##Competitive Review
Modeling in the New Wave- This is an article that is supposed to explain a method by which a machine learning program was used to ‘read’ a series of science fiction book and then pool the data. It was then used to examine trends in the literature; the usage of certain words, common tropes, and possible indications about where the genre might be headed in the future. Many pictures are used throughout the article; mostly different types of graphs that show how information was collected and interpreted, and then the text explained what each picture meant. Unfortunately, it seemed to me that the way the information was presented was very clunky. By that, I mean that the graphs were extremely cluttered and hard to read, even with the explanations provided. The sheer amount of information was also something of an issue, as it was hard to keep up with what the author was talking about or even if any of it really mattered at all. There also isn’t really a definitive conclusion; just conjecture. Overall, this article would really benefit from new direction. This article just presents information and data with very little overview, which makes it a clustered and confusing read.
S: easily-readable pictures/diagrams to help illustrate what is being said, plenty of in-text examples of concepts that the piece is introducing
W: lots of technical jargon sometimes made it hard to know exactly what was being talked about, so many examples of books and authors and genre that things can get confusing at times, it's hard to discern what the actual point of this article is.
O: more explanation on some of the technical terms used in the article, more insight on why this was important at all
T: articles with more explanation/hand-holding.
Document Cleaning- This article focuses on telling people how to transcribe documents (usually older ones) that are in paper format and placing them in a digital format. It goes into the specifics of reformatting certain parts for spelling and capitalization, correcting mistakes in the text, and working to manually add in parts that raw document scanning couldn’t quite decipher due to size or fading. This is a fairly short article with textual explanations and pictures to illustrate certain points. However, it’s hard to say exactly where and why this would be useful information unless it’s an extremely specific circumstance. In addition, the instructions here are not comprehensive and leave a few things open. This article could benefit from using more examples, as well as more in depth explaining on the author’s part.
S: mostly simple language, pictures to illustrate what is being said, clear explanations
W: unclear as to where this would be applicable, not comprehensive
O: more examples
T: articles with more/better examples
SpaCy Tutorial- This is an extremely long, somewhat comprehensive tutorial on how to use SpaCy as a natural language processor. It quite wordy but also includes examples and pictures that illustrate how to do certain things within the program. It is split up into different sections at the beginning and includes almost a step by step guide on how to do things. While this is helpful, it is easy to feel overwhelmed or lost in the sheer amount of information being presented here. Also, there is a lot of jargon that isn’t easily explained, and I personally feel there isn’t a lot of learning involved here. By that, I mean that most of what is presented here can mostly be done just by copy and pasting what is in the tutorial. While that is a useful skill and something that happens a lot in coding, this feels more like a crutch than a helpful tool in this context. Overall, the amount of detail is both helpful and harmful to this tutorial. However, it would benefit from being a little less long, more concise, and having more interactive tutorials, so as to encourage actual learning as opposed to copy and pasting.
   S: in-depth descriptions, examples of the code needed to complete each section, thorough instructions, the goal of each section is clearly stated
   W: the tutorial boils down to copy and pasting everything; not much learning is involved, the tutorial is extremely long
   O: more interactive tutorials, cutting down the size so the document doesn’t seem as imposing
   T: a more concise tutorial, a more engaging tutorial, a tutorial that encourages more actual learning
##Design Implications
Based on the findings in class and all the testing that has been done in different tutorials, I have come up with a list of flaws and difficulties that new coders might or will have when picking up this sort of thing, which has been listed in the audience profile section. Based on those observations and commonalities, I have come up with another list of things that could be helpful to add in order to make the process of learning – and the tutorial specifically – easier on the learner.
- it could be helpful to include a glossary of terms
- would be better to overexplain than underexplain
- images or videos showing how things are done would be beneficial
- instructions that tell the reader exactly what they are going to do
- perhaps a separate window/reference to look at would help people not get lost
##Challenges
All of this in mind, there are a few challenges both in execution and design that may come up during the process of creating this tutorial. While there are many possible solutions, I have not narrowed down exact ones to any of these, I just mean for this to be a list of things to look out for and strive to avoid during construction and testing, as these to me seem like common issues.
- Balancing everything
- making it approachable from a novice perspective
- explaining the right amount, though it would be better to overexplain as opposed to underexplain
- not using too much jargon when the reader may not have any idea what is really being discussed
- keeping in mind that readers know less about the subject than the writer, meaning the writer must make things simpler than they realize
- actually encouraging growth and learning as opposed to just giving the user a set of instructions to follow that they can copy and paste
##APA Reference List
Biesiadecki, L. (2020, May 6). Document cleaning: An introductory guide. Loretta C. Duckworth Scholars Studio. Retrieved March 21, 2022, from https://sites.temple.edu/tudsc/2020/05/06/document-cleaning-guide/
Shrivarsheni. Spacy tutorial - learn all of spacy in one complete writeup: ML+. Machine Learning Plus. (2021, May 27). Retrieved March 21, 2022, from https://www.machinelearningplus.com/spacy-tutorial-nlp/#application1extractingbrandnameswithnamedentityrecognition 
Wermer-colan, H. (2020, April 22). Modeling the new wave: On learning to use machines to read sci-fi lit. Loretta C. Duckworth Scholars Studio. Retrieved March 21, 2022, from https://sites.temple.edu/tudsc/2018/04/26/modeling-the-new-wave-on-learning-to-use-machines-to-read-sci-fi-lit/ 
